#+STARTUP: overview
#+TITLE: Emacs Configuration under test
#+CREATOR: Kanelis Elias
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;

* Initialize
** Editor
#+BEGIN_SRC emacs-lisp
  ;;------------------------------------------------------------------------------
  ;;Editor
  (global-linum-mode t)                             ;;Show line numbers left.
  (column-number-mode t)                            ;;Show the column number at
                                                    ;;  the powerline.
  (global-set-key (kbd "RET") 'newline-and-indent)  ;;Automatically indent when
                                                    ;;  press RET.
  (global-set-key (kbd "C-c w") 'whitespace-mode)   ;;View all whitespace chars.

  ;;Show unncessary whitespace that can mess up your diff
  (add-hook 'prog-mode-hook
            (lambda()
              (interactive)
              (setq show-trailing-whitespace 1)))
#+END_SRC
** Make window 80 columns wide
#+BEGIN_SRC emacs-lisp
  (defun set-window-width (n)
    "Set the selected window's width."
    (adjust-window-trailing-edge (selected-window) (- n (window-width)) t))

  (defun set-80-columns ()
    "Set the selected window to 80 columns."
    (interactive)
    (set-window-width 80))

  (global-set-key (kbd "C-x `") 'set-80-columns)    ;;Make window 80 columns wide
#+END_SRC
** C Coding style
#+BEGIN_SRC emacs-lisp
  ;; Available C coding style:
  (setq-default indent-tabs-mode t)                 ;;Indentation is tabs
  (setq-default tab-width 8)                        ;;Tab is represented by
                                                    ;;  8 spaces.

  (setq c-default-style "linux"                     ;;Coding style of linux
        c-basic-offset 8)                           ;;Change indentation of tab
                                                    ;;  by 8 spaces.
#+END_SRC

** TODO Calculator
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'calc)
(use-package calc
  :defer t
  :config (setf calc-display-trail nil)) ;;Do not let calculator display a window
#+END_SRC

** TODO Swiper
#+BEGIN_SRC emacs-lisp
(use-package counsel                              ;;is a requirement for swiper
  :ensure t)

(use-package swiper                               ;;Makes search easier
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC

** TODO Iedit
Edit multiple regions simultaneously
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
  (require 'iedit)

  ;;This is a bug in Mac but in linux works.(I do not need a fix)
  ;;(define-key global-map (kbd "C-c ;") 'iedit-mode)
#+END_SRC

** Navigation
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

** Try packages
Let's you try packages without installing them
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

** Which key
Brings up help on key combinations
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

** REST
#+BEGIN_SRC emacs-lisp
;;------------------------------------------------------------------------------
;;Windows
(winner-mode 1)                                   ;;Remember old configuration.
(windmove-default-keybindings)                    ;;Enables traversing througth
                                                  ;;  windows with shift+arrows.
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap-other-window] 'ace-window)))

;;------------------------------------------------------------------------------
;;Buffers
;; using swiper so ido no longer needed
;;(setq ido-enable-flex-matching t)
;;(setq ido-everywhere t)
;;(ido-mode 1)

(defalias 'list-buffers 'ibuffer)                 ;;Change the name of the
                                                  ;;  'all buffer list'.
#+END_SRC

* C/C++ IDE
#+BEGIN_SRC emacs-lisp
;;(load "~/.emacs.d/lisp/c_cpp_ide" )
;;(require 'tedi-c_cpp_ide)
#+END_SRC

* Tests
#+BEGIN_SRC emacs-lisp
;;(load "~/.emacs.d/lisp/tests" )
;;(require 'tedi-tests)
#+END_SRC
