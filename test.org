#+STARTUP: overview
#+TITLE: Emacs Configuration under test
#+CREATOR: Kanelis Elias
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;

* Garbage collection at startup
This fixed garbage collection, makes emacs start up faster
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 402653184 gc-cons-percentage 0.6)

  (defvar startup/file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)

  (defun startup/revert-file-name-handler-alist ()
    (setq file-name-handler-alist startup/file-name-handler-alist))

  (defun startup/reset-gc ()
    (setq gc-cons-threshold 16777216 gc-cons-percentage 0.1))

  (add-hook 'emacs-startup-hook 'startup/revert-file-name-handler-alist)
  (add-hook 'emacs-startup-hook 'startup/reset-gc)
#+END_SRC

* Package manager
#+BEGIN_SRC emacs-lisp
  ;; This must come before configurations of installed packages.
  (package-initialize)
  (setq package-enable-at-startup nil)

  (require 'package)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("MELPA" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("MELPA Stable" . "http://stable.melpa.org/packages/") t)

  ;;(package-refresh-contents)
#+END_SRC

* Custom generated configurations
This changes the default location
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

* Packages
** Use package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

* OLD
** Initialize 1
*** Workplace
#+BEGIN_SRC emacs-lisp
  ;;(setq initial-scratch-message nil)                  ;;Not scratch message.
  ;;(tool-bar-mode -1)                                ;;Remove toolbar.
  ;;(scroll-bar-mode -1)                              ;;Remove scroll-bar.
  ;;(desktop-save-mode f)                             ;;Save session.
  (set-frame-parameter nil 'fullscreen 'fullboth)     ;;Make fullscreen.
  ;;(menu-bar-mode -1)                                ;;Hide menu.
  ;;(defalias 'yes-or-no-p 'y-or-n-p)                 ;;y & n instead of yes & no
  ;;(setq auto-save-default nil)                        ;;Remove auto-save #...#
  ;;(global-set-key (kbd "<f5>") 'menu-bar-mode)    ;;Toggle menu-bar ;;No need as
                                                    ;;  f10 by default.
  (global-set-key (kbd "M-g") 'goto-line)           ;;Got to line number.
  (global-set-key (kbd "C-x k") 'kill-this-buffer)  ;;Kill buffer in window
                                                    ;;  without asking y/n.

  (blink-cursor-mode -1)                            ;;Do not blink cursor.
  (prefer-coding-system 'utf-8-unix)                ;;Always use the one true
                                                    ;;  encoding.
#+END_SRC

*** Editor
#+BEGIN_SRC emacs-lisp
  ;;------------------------------------------------------------------------------
  ;;Editor
  (global-linum-mode t)                             ;;Show line numbers left.
  ;;(column-number-mode t)                            ;;Show the column number at
                                                    ;;  the powerline.
  (global-set-key (kbd "RET") 'newline-and-indent)  ;;Automatically indent when
                                                    ;;  press RET.
  (global-set-key (kbd "C-c w") 'whitespace-mode)   ;;View all whitespace chars.

  ;;Show unncessary whitespace that can mess up your diff
  (add-hook 'prog-mode-hook
            (lambda()
              (interactive)
              (setq show-trailing-whitespace 1)))
#+END_SRC

*** Make window 80 columns wide
#+BEGIN_SRC emacs-lisp
  (defun set-window-width (n)
    "Set the selected window's width."
    (adjust-window-trailing-edge (selected-window) (- n (window-width)) t))

  (defun set-80-columns ()
    "Set the selected window to 80 columns."
    (interactive)
    (set-window-width 80))

  (global-set-key (kbd "C-x `") 'set-80-columns)    ;;Make window 80 columns wide
#+END_SRC

*** Fonts
#+BEGIN_SRC emacs-lisp
  (when (member "Source Code Pro" (font-family-list)) (set-frame-font "Source Code Pro-10" t t))
  ;;(set-default-font "Source Code Pro-10" nil t)
  (set-face-attribute 'default nil :height 100)     ;;Default font size %
#+END_SRC

*** Visualize whitespace
#+BEGIN_SRC emacs-lisp
  (require 'whitespace)
  (setq whitespace-style '(face empty tabs lines-tail trailing))
  (global-whitespace-mode t)
#+END_SRC

*** C Coding style
#+BEGIN_SRC emacs-lisp
  ;; Available C coding style:
  (setq-default indent-tabs-mode t)                 ;;Indentation is tabs
  (setq-default tab-width 8)                        ;;Tab is represented by
                                                    ;;  8 spaces.

  (setq c-default-style "linux"                     ;;Coding style of linux
        c-basic-offset 8)                           ;;Change indentation of tab
                                                    ;;  by 8 spaces.
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :config (load-theme 'monokai t))

  ;;(use-package zenburn-theme
  ;;  :ensure t
  ;;  :config (load-theme 'zenburn t))

  ;;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  ;;(load-theme 'tedi t)
#+END_SRC

*** Modeline
#+BEGIN_SRC emacs-lisp
  ;;Mode line theme
  ;;(display-time-mode)                               ;;Show time in powerline.
  ;;(use-package smart-mode-line
  ;;  :ensure t)
  ;;(require 'smart-mode-line)
  ;;(setq powerline-arrow-shape 'curve)
  ;;(setq powerline-default-separator-dir '(right . left))
  ;;(setq sml/theme 'powerline)

  ;;(setq sml/no-confirm-load-theme t)
  ;;(setq sml/theme 'dark)
  ;;(setq sml/mode-width 0)
  ;;(setq sml/name-width 20)
  ;;(rich-minority-mode 1)
  ;;(setf rm-blacklist "")

  ;;This was an error
  ;;(use-package smart-mode-line-powerline
  ;;  :ensure t)

  ;;(sml/setup)
#+END_SRC

** Initialize 2
*** Calculator
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'calc)
(use-package calc
  :defer t
  :config (setf calc-display-trail nil)) ;;Do not let calculator display a window
#+END_SRC

*** TODO Search
THIS HAS WARNINGS
+BEGIN_SRC emacs-lisp
(use-package counsel                              ;;is a requirement for swiper
  :ensure t)

(use-package swiper                               ;;Makes search easier
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
+END_SRC

*** TODO Iedit
THIS ISSUES WARNINGS
+BEGIN_SRC emacs-lisp
;;------------------------------------------------------------------------------
;;Iedit - Edit multiple regions simultaneously
(use-package iedit
  :ensure t)
(require 'iedit)

;;This is a bug in Mac but in linux works.(I do not need a fix)
;;(define-key global-map (kbd "C-c ;") 'iedit-mode)
+END_SRC

*** Navigation
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

*** Try packages
Let's you try packages without installing them
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

*** Whick key
Brings up help on key combinations
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

*** REST
#+BEGIN_SRC emacs-lisp
;;------------------------------------------------------------------------------
;;Windows
(winner-mode 1)                                   ;;Remember old configuration.
(windmove-default-keybindings)                    ;;Enables traversing througth
                                                  ;;  windows with shift+arrows.
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap-other-window] 'ace-window)))

;;------------------------------------------------------------------------------
;;Buffers
;; using swiper so ido no longer needed
;;(setq ido-enable-flex-matching t)
;;(setq ido-everywhere t)
;;(ido-mode 1)

(defalias 'list-buffers 'ibuffer)                 ;;Change the name of the
                                                  ;;  'all buffer list'.
#+END_SRC

** C/C++ IDE
#+BEGIN_SRC emacs-lisp
;;(load "~/.emacs.d/lisp/c_cpp_ide" )
;;(require 'tedi-c_cpp_ide)
#+END_SRC

** Tests
#+BEGIN_SRC emacs-lisp
;;(load "~/.emacs.d/lisp/tests" )
;;(require 'tedi-tests)
#+END_SRC
